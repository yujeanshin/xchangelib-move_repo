# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from . import service_pb2 as service__pb2


class AdminStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.StartWorker = channel.unary_unary(
                '/manager.Admin/StartWorker',
                request_serializer=service__pb2.StartWorkerRequest.SerializeToString,
                response_deserializer=service__pb2.StartWorkerResponse.FromString,
                )
        self.KillWorker = channel.unary_unary(
                '/manager.Admin/KillWorker',
                request_serializer=service__pb2.KillWorkerRequest.SerializeToString,
                response_deserializer=service__pb2.KillWorkerResponse.FromString,
                )
        self.ListWorkers = channel.unary_unary(
                '/manager.Admin/ListWorkers',
                request_serializer=service__pb2.ListWorkersRequest.SerializeToString,
                response_deserializer=service__pb2.ListWorkersResponse.FromString,
                )


class AdminServicer(object):
    """Missing associated documentation comment in .proto file."""

    def StartWorker(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def KillWorker(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListWorkers(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_AdminServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'StartWorker': grpc.unary_unary_rpc_method_handler(
                    servicer.StartWorker,
                    request_deserializer=service__pb2.StartWorkerRequest.FromString,
                    response_serializer=service__pb2.StartWorkerResponse.SerializeToString,
            ),
            'KillWorker': grpc.unary_unary_rpc_method_handler(
                    servicer.KillWorker,
                    request_deserializer=service__pb2.KillWorkerRequest.FromString,
                    response_serializer=service__pb2.KillWorkerResponse.SerializeToString,
            ),
            'ListWorkers': grpc.unary_unary_rpc_method_handler(
                    servicer.ListWorkers,
                    request_deserializer=service__pb2.ListWorkersRequest.FromString,
                    response_serializer=service__pb2.ListWorkersResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'manager.Admin', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Admin(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def StartWorker(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/manager.Admin/StartWorker',
            service__pb2.StartWorkerRequest.SerializeToString,
            service__pb2.StartWorkerResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def KillWorker(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/manager.Admin/KillWorker',
            service__pb2.KillWorkerRequest.SerializeToString,
            service__pb2.KillWorkerResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListWorkers(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/manager.Admin/ListWorkers',
            service__pb2.ListWorkersRequest.SerializeToString,
            service__pb2.ListWorkersResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class ClientStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Start = channel.stream_stream(
                '/manager.Client/Start',
                request_serializer=service__pb2.ClientMessageToExchange.SerializeToString,
                response_deserializer=service__pb2.ExchangeMessageToClient.FromString,
                )


class ClientServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Start(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ClientServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Start': grpc.stream_stream_rpc_method_handler(
                    servicer.Start,
                    request_deserializer=service__pb2.ClientMessageToExchange.FromString,
                    response_serializer=service__pb2.ExchangeMessageToClient.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'manager.Client', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Client(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Start(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/manager.Client/Start',
            service__pb2.ClientMessageToExchange.SerializeToString,
            service__pb2.ExchangeMessageToClient.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class ExchangeUserStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """


class ExchangeUserServicer(object):
    """Missing associated documentation comment in .proto file."""


def add_ExchangeUserServicer_to_server(servicer, server):
    rpc_method_handlers = {
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'manager.ExchangeUser', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class ExchangeUser(object):
    """Missing associated documentation comment in .proto file."""
